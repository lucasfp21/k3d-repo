# pod
    menor estrutura dentro de um cluster, pode ser formado por varios containers, compartilham mesma configuração de rede e diretorios

    * Criacao declarativa:
        quando eu crio um arquivo yaml e uso o kubectl apply para executar

        - todo arquivo de criacao de objeto no k8s tem que ter os seguintes 4 parametros:
            apiVersion:
                kubectl api-resources
                    serve para listar todas as versoes de api disponiveis no cluster
            kind:
                tipo do recurso
            metadata:
                tags, labels e etc do recurso
            spec:
                aqui fica a definicao dos containers que farao parte do pod
                containers:
                    - name: <nome container:
                      image: <imagem>
                      ports:
                        - name: http
                          containerPort: 80
                          protocol: TCP

    * kubectl get apply -f pod.yaml para criar
      kubectl delete -f pod.yaml para deletar todos os recursos referentes a esse arquivo

    * kubectl get po pra listar
        kubectl get po -o wide
            para trazer mais info
        kubectl get po -l version=green
            para listar usando a labels como referencia

    * kubectl  describe pod <nome pod>

    * link de porta do pod com a maquina host
        kubectl port-forward pod/meu-pod 8080:80
        kubectl port-forward <tipo de recurso>/<nome recurso> <portal local>:<porta do pod>

# replicaSet
    é um controlador que gerencia a quantidade de recursos como pods no cluster, garantindo a escalabilidade e a resiliencia dos pods no cluster
    PS. nao faz atualização na aplicao ou imagem (só na infra), pra mudar uma versao da applicacao/imagem teriamos que usar o deployment

    * labels, marcação de recursos com chave e valor
    * selectors, selecionando objetos com base em labels

    apiVersion: apps:v1
    kind: ReplicaSet
    metadata:
        name: myreplicaset
    spec:                       # especificacao das regras de replicas (min e max se for o caso)
        replicas: 1
        selector:               # regra de match, ou seja, aplicar as specs a todos que baterem as labels definidas aqui
            matchLabels:
            app: web
    template:                   # template do que sera afetado pelas specs acima
        metadata:
        labels:
            app: web            # nesse caso, tudo que tenha o valor web para o campo app
        spec:
            containers:         # especificacao do recurso que bate com as regras (basicamente copiar do yaml)
                - name: web
                  image: kubedevio/web-color:green
                  ports:
                    - name: http
                    containerPort: 80
                    protocol: TCP

    * kubectl get po
        listar ReplicaSet
    *kubectl get po -o wide
        listar com mais info
    * kubectl describe rs replicaset
        para descrever um ReplicaSet

# kubectl apply -f replicaset.yaml && watch 'kubectl get rs,po'
    para listar enquanto cria
    
